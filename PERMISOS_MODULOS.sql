-- üõ°Ô∏è SISTEMA DE PERMISOS POR M√ìDULO - SISTEMA POS

-- Tabla para almacenar los m√≥dulos del sistema
CREATE TABLE public.modulos (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre text NOT NULL UNIQUE,
  descripcion text,
  icono text,
  ruta text,
  activo boolean DEFAULT true,
  orden integer DEFAULT 0,
  creado_el timestamp with time zone DEFAULT now()
);

-- Tabla para almacenar los permisos de usuarios por m√≥dulo
CREATE TABLE public.permisos_usuarios (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  fk_id_usuario bigint NOT NULL,
  fk_id_modulo bigint NOT NULL,
  puede_ver boolean DEFAULT false,
  puede_crear boolean DEFAULT false,
  puede_editar boolean DEFAULT false,
  puede_eliminar boolean DEFAULT false,
  creado_el timestamp with time zone DEFAULT now(),
  actualizado_el timestamp with time zone DEFAULT now(),
  CONSTRAINT permisos_usuarios_pkey PRIMARY KEY (id),
  CONSTRAINT permisos_usuarios_fk_id_usuario_fkey FOREIGN KEY (fk_id_usuario) REFERENCES usuarios (id) ON DELETE CASCADE,
  CONSTRAINT permisos_usuarios_fk_id_modulo_fkey FOREIGN KEY (fk_id_modulo) REFERENCES modulos (id) ON DELETE CASCADE,
  CONSTRAINT permisos_usuarios_unique UNIQUE (fk_id_usuario, fk_id_modulo)
);

-- √çndices para optimizar consultas
CREATE INDEX idx_permisos_usuarios_usuario ON permisos_usuarios(fk_id_usuario);
CREATE INDEX idx_permisos_usuarios_modulo ON permisos_usuarios(fk_id_modulo);
CREATE INDEX idx_modulos_activo ON modulos(activo);
CREATE INDEX idx_modulos_orden ON modulos(orden);

-- Insertar m√≥dulos existentes del sistema
INSERT INTO public.modulos (nombre, descripcion, icono, ruta, orden) VALUES
('dashboard', 'Dashboard', 'BarChart3', '/dashboard', 1),
('articulos', 'Gesti√≥n de Art√≠culos', 'Package', '/articles', 2),
('clientes', 'Gesti√≥n de Clientes', 'Users', '/clientes', 3),
('ventas', 'Ventas', 'ShoppingCart', '/ventas', 4),
('mis-ventas', 'Mis Ventas', 'FileText', '/mis-ventas', 5),
('pagos', 'Pagos', 'CreditCard', '/pagos', 6),
('cuentas-corrientes', 'Cuentas Corrientes', 'Receipt', '/cuentas-corrientes', 7),
('movimientos-stock', 'Movimientos de Stock', 'Truck', '/movimientos-stock', 8),
('importacion-stock', 'Importaci√≥n de Stock', 'Upload', '/importacion-stock', 9),
('stock-faltante', 'Stock Faltante', 'AlertTriangle', '/stock-faltante', 10),
('caja', 'Caja', 'CashRegister', '/caja', 11),
('empleados', 'Empleados', 'UserCheck', '/empleados', 12),
('gastos-empleados', 'Gastos de Empleados', 'DollarSign', '/gastos-empleados', 13),
('liquidaciones', 'Liquidaciones', 'Calculator', '/liquidaciones', 14),
('talles-colores', 'Talles y Colores', 'Palette', '/talles-colores', 15),
('variantes-productos', 'Variantes de Productos', 'Layers', '/variantes-productos', 16),
('agrupadores', 'Agrupadores', 'Folder', '/agrupadores', 17),
('usuarios', 'Usuarios', 'Users', '/usuarios', 18);

-- Funci√≥n para crear permisos por defecto para un nuevo usuario
CREATE OR REPLACE FUNCTION crear_permisos_por_defecto()
RETURNS TRIGGER AS $$
BEGIN
  -- Insertar todos los m√≥dulos con permisos b√°sicos seg√∫n el rol
  INSERT INTO permisos_usuarios (fk_id_usuario, fk_id_modulo, puede_ver, puede_crear, puede_editar, puede_eliminar)
  SELECT 
    NEW.id,
    m.id,
    CASE 
      WHEN NEW.rol = 'admin' THEN true
      WHEN NEW.rol = 'supervisor' THEN true
      WHEN NEW.rol = 'vendedor' THEN m.nombre IN ('dashboard', 'articulos', 'clientes', 'ventas', 'mis-ventas', 'movimientos-stock', 'importacion-stock', 'stock-faltante', 'talles-colores', 'variantes-productos', 'agrupadores')
      WHEN NEW.rol = 'cobrador' THEN m.nombre IN ('dashboard', 'ventas', 'mis-ventas', 'pagos', 'cuentas-corrientes', 'caja')
      ELSE false
    END,
    CASE 
      WHEN NEW.rol = 'admin' THEN true
      WHEN NEW.rol = 'supervisor' THEN m.nombre NOT IN ('usuarios')
      WHEN NEW.rol = 'vendedor' THEN m.nombre IN ('ventas', 'movimientos-stock', 'importacion-stock')
      WHEN NEW.rol = 'cobrador' THEN m.nombre IN ('ventas', 'pagos', 'cuentas-corrientes')
      ELSE false
    END,
    CASE 
      WHEN NEW.rol = 'admin' THEN true
      WHEN NEW.rol = 'supervisor' THEN m.nombre NOT IN ('usuarios')
      WHEN NEW.rol = 'vendedor' THEN m.nombre IN ('ventas', 'movimientos-stock')
      WHEN NEW.rol = 'cobrador' THEN m.nombre IN ('ventas', 'pagos', 'cuentas-corrientes')
      ELSE false
    END,
    CASE 
      WHEN NEW.rol = 'admin' THEN true
      ELSE false
    END
  FROM modulos m
  WHERE m.activo = true;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger para crear permisos autom√°ticamente al crear un usuario
CREATE TRIGGER trigger_crear_permisos_usuario
  AFTER INSERT ON usuarios
  FOR EACH ROW
  EXECUTE FUNCTION crear_permisos_por_defecto();

-- Funci√≥n para actualizar permisos cuando se cambia el rol de un usuario
CREATE OR REPLACE FUNCTION actualizar_permisos_por_rol()
RETURNS TRIGGER AS $$
BEGIN
  -- Eliminar permisos existentes
  DELETE FROM permisos_usuarios WHERE fk_id_usuario = NEW.id;
  
  -- Insertar nuevos permisos seg√∫n el rol
  INSERT INTO permisos_usuarios (fk_id_usuario, fk_id_modulo, puede_ver, puede_crear, puede_editar, puede_eliminar)
  SELECT 
    NEW.id,
    m.id,
    CASE 
      WHEN NEW.rol = 'admin' THEN true
      WHEN NEW.rol = 'supervisor' THEN true
      WHEN NEW.rol = 'vendedor' THEN m.nombre IN ('dashboard', 'articulos', 'clientes', 'ventas', 'mis-ventas', 'movimientos-stock', 'importacion-stock', 'stock-faltante', 'talles-colores', 'variantes-productos', 'agrupadores')
      WHEN NEW.rol = 'cobrador' THEN m.nombre IN ('dashboard', 'ventas', 'mis-ventas', 'pagos', 'cuentas-corrientes', 'caja')
      ELSE false
    END,
    CASE 
      WHEN NEW.rol = 'admin' THEN true
      WHEN NEW.rol = 'supervisor' THEN m.nombre NOT IN ('usuarios')
      WHEN NEW.rol = 'vendedor' THEN m.nombre IN ('ventas', 'movimientos-stock', 'importacion-stock')
      WHEN NEW.rol = 'cobrador' THEN m.nombre IN ('ventas', 'pagos', 'cuentas-corrientes')
      ELSE false
    END,
    CASE 
      WHEN NEW.rol = 'admin' THEN true
      WHEN NEW.rol = 'supervisor' THEN m.nombre NOT IN ('usuarios')
      WHEN NEW.rol = 'vendedor' THEN m.nombre IN ('ventas', 'movimientos-stock')
      WHEN NEW.rol = 'cobrador' THEN m.nombre IN ('ventas', 'pagos', 'cuentas-corrientes')
      ELSE false
    END,
    CASE 
      WHEN NEW.rol = 'admin' THEN true
      ELSE false
    END
  FROM modulos m
  WHERE m.activo = true;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger para actualizar permisos cuando se cambia el rol
CREATE TRIGGER trigger_actualizar_permisos_rol
  AFTER UPDATE OF rol ON usuarios
  FOR EACH ROW
  EXECUTE FUNCTION actualizar_permisos_por_rol();

-- Crear permisos para usuarios existentes (ejecutar solo una vez)
-- INSERT INTO permisos_usuarios (fk_id_usuario, fk_id_modulo, puede_ver, puede_crear, puede_editar, puede_eliminar)
-- SELECT 
--   u.id,
--   m.id,
--   CASE 
--     WHEN u.rol = 'admin' THEN true
--     WHEN u.rol = 'supervisor' THEN true
--     WHEN u.rol = 'vendedor' THEN m.nombre IN ('dashboard', 'articulos', 'clientes', 'ventas', 'mis-ventas', 'movimientos-stock', 'importacion-stock', 'stock-faltante', 'talles-colores', 'variantes-productos', 'agrupadores')
--     WHEN u.rol = 'cobrador' THEN m.nombre IN ('dashboard', 'ventas', 'mis-ventas', 'pagos', 'cuentas-corrientes', 'caja')
--     ELSE false
--   END,
--   CASE 
--     WHEN u.rol = 'admin' THEN true
--     WHEN u.rol = 'supervisor' THEN m.nombre NOT IN ('usuarios')
--     WHEN u.rol = 'vendedor' THEN m.nombre IN ('ventas', 'movimientos-stock', 'importacion-stock')
--     WHEN u.rol = 'cobrador' THEN m.nombre IN ('ventas', 'pagos', 'cuentas-corrientes')
--     ELSE false
--   END,
--   CASE 
--     WHEN u.rol = 'admin' THEN true
--     WHEN u.rol = 'supervisor' THEN m.nombre NOT IN ('usuarios')
--     WHEN u.rol = 'vendedor' THEN m.nombre IN ('ventas', 'movimientos-stock')
--     WHEN u.rol = 'cobrador' THEN m.nombre IN ('ventas', 'pagos', 'cuentas-corrientes')
--     ELSE false
--   END,
--   CASE 
--     WHEN u.rol = 'admin' THEN true
--     ELSE false
--   END
-- FROM usuarios u
-- CROSS JOIN modulos m
-- WHERE m.activo = true
-- AND NOT EXISTS (
--   SELECT 1 FROM permisos_usuarios pu 
--   WHERE pu.fk_id_usuario = u.id AND pu.fk_id_modulo = m.id
-- ); 