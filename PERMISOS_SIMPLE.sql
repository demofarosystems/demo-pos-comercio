-- üõ°Ô∏è SISTEMA DE PERMISOS SIMPLE - SISTEMA POS

-- Tabla para almacenar los permisos de usuarios por m√≥dulo (solo puede_ver)
CREATE TABLE public.permisos_usuarios (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  fk_id_usuario bigint NOT NULL,
  fk_id_modulo bigint NOT NULL,
  puede_ver boolean DEFAULT false,
  creado_el timestamp with time zone DEFAULT now(),
  actualizado_el timestamp with time zone DEFAULT now(),
  CONSTRAINT permisos_usuarios_pkey PRIMARY KEY (id),
  CONSTRAINT permisos_usuarios_fk_id_usuario_fkey FOREIGN KEY (fk_id_usuario) REFERENCES usuarios (id) ON DELETE CASCADE,
  CONSTRAINT permisos_usuarios_fk_id_modulo_fkey FOREIGN KEY (fk_id_modulo) REFERENCES modulos (id) ON DELETE CASCADE,
  CONSTRAINT permisos_usuarios_unique UNIQUE (fk_id_usuario, fk_id_modulo)
);

-- √çndices para optimizar consultas
CREATE INDEX idx_permisos_usuarios_usuario ON permisos_usuarios(fk_id_usuario);
CREATE INDEX idx_permisos_usuarios_modulo ON permisos_usuarios(fk_id_modulo);

-- Funci√≥n para crear permisos por defecto para un nuevo usuario
CREATE OR REPLACE FUNCTION crear_permisos_por_defecto()
RETURNS TRIGGER AS $$
BEGIN
  -- Insertar todos los m√≥dulos con permisos b√°sicos seg√∫n el rol
  INSERT INTO permisos_usuarios (fk_id_usuario, fk_id_modulo, puede_ver)
  SELECT 
    NEW.id,
    m.id,
    CASE 
      WHEN NEW.rol = 'admin' THEN true
      WHEN NEW.rol = 'supervisor' THEN true
      WHEN NEW.rol = 'vendedor' THEN m.nombre IN ('dashboard', 'articulos', 'clientes', 'ventas', 'mis-ventas', 'movimientos-stock', 'importacion-stock', 'stock-faltante', 'talles-colores', 'variantes-productos', 'agrupadores', 'informes')
      WHEN NEW.rol = 'cobrador' THEN m.nombre IN ('dashboard', 'ventas', 'mis-ventas', 'pagos', 'cuentas-corrientes', 'caja', 'informes')
      ELSE false
    END
  FROM modulos m
  WHERE m.activo = true;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger para crear permisos autom√°ticamente al crear un usuario
CREATE TRIGGER trigger_crear_permisos_usuario
  AFTER INSERT ON usuarios
  FOR EACH ROW
  EXECUTE FUNCTION crear_permisos_por_defecto();

-- Funci√≥n para actualizar permisos cuando se cambia el rol de un usuario
CREATE OR REPLACE FUNCTION actualizar_permisos_por_rol()
RETURNS TRIGGER AS $$
BEGIN
  -- Eliminar permisos existentes
  DELETE FROM permisos_usuarios WHERE fk_id_usuario = NEW.id;
  
  -- Insertar nuevos permisos seg√∫n el rol
  INSERT INTO permisos_usuarios (fk_id_usuario, fk_id_modulo, puede_ver)
  SELECT 
    NEW.id,
    m.id,
    CASE 
      WHEN NEW.rol = 'admin' THEN true
      WHEN NEW.rol = 'supervisor' THEN true
      WHEN NEW.rol = 'vendedor' THEN m.nombre IN ('dashboard', 'articulos', 'clientes', 'ventas', 'mis-ventas', 'movimientos-stock', 'importacion-stock', 'stock-faltante', 'talles-colores', 'variantes-productos', 'agrupadores', 'informes')
      WHEN NEW.rol = 'cobrador' THEN m.nombre IN ('dashboard', 'ventas', 'mis-ventas', 'pagos', 'cuentas-corrientes', 'caja', 'informes')
      ELSE false
    END
  FROM modulos m
  WHERE m.activo = true;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger para actualizar permisos cuando se cambia el rol
CREATE TRIGGER trigger_actualizar_permisos_rol
  AFTER UPDATE OF rol ON usuarios
  FOR EACH ROW
  EXECUTE FUNCTION actualizar_permisos_por_rol(); 