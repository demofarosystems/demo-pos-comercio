-- =====================================================
-- SISTEMA POS - CREACIÓN COMPLETA DE TABLAS
-- =====================================================
-- Ejecutar en orden para respetar las dependencias entre tablas
-- =====================================================

-- =====================================================
-- 1. CONFIGURACIÓN DE EMPRESA (SIN DEPENDENCIAS)
-- =====================================================

CREATE TABLE public.configuracion (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  creado_el timestamp with time zone DEFAULT now(),
  nombre text,
  imagen text,
  color_primario text DEFAULT '#22c55e'
);

-- =====================================================
-- 2. USUARIOS (SIN DEPENDENCIAS)
-- =====================================================

CREATE TABLE public.usuarios (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre text NOT NULL,
  email text UNIQUE NOT NULL,
  telefono text,
  password_hash text,
  rol text NOT NULL DEFAULT 'cobrador' CHECK (rol IN ('admin', 'supervisor', 'cobrador')),
  creado_el timestamp with time zone DEFAULT now(),
  prueba_gratis boolean DEFAULT true,
  clerk_user_id text UNIQUE
);

-- =====================================================
-- 3. AGRUPADORES (SIN DEPENDENCIAS)
-- =====================================================

CREATE TABLE public.agrupadores (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre text NOT NULL,
  activo boolean DEFAULT true
);

-- =====================================================
-- 4. MARCAS (SIN DEPENDENCIAS)
-- =====================================================

CREATE TABLE public.marcas (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  descripcion text NOT NULL,
  activo boolean DEFAULT true
);

-- =====================================================
-- 5. COLORES (SIN DEPENDENCIAS)
-- =====================================================

CREATE TABLE public.color (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  descripcion text NOT NULL,
  activo boolean DEFAULT true
);

-- =====================================================
-- 6. TALLES (SIN DEPENDENCIAS)
-- =====================================================

CREATE TABLE public.talles (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  descripcion text NOT NULL,
  activo boolean DEFAULT true
);

-- =====================================================
-- 7. TIPOS DE COMPROBANTES (SIN DEPENDENCIAS)
-- =====================================================

CREATE TABLE public.tipos_comprobantes (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  descripcion text NOT NULL,
  activo boolean DEFAULT true,
  reingresa_stock boolean DEFAULT false
);

-- =====================================================
-- 8. TIPOS DE GASTO (SIN DEPENDENCIAS)
-- =====================================================

CREATE TABLE public.tipo_gasto (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  descripcion text,
  obliga_empleado boolean,
  afecta_caja boolean
);

-- =====================================================
-- 9. CUENTAS DE TESORERÍA (SIN DEPENDENCIAS)
-- =====================================================

CREATE TABLE public.cuentas_tesoreria (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  descripcion text NOT NULL,
  activo boolean DEFAULT true
);

-- =====================================================
-- 10. CAJAS (SIN DEPENDENCIAS)
-- =====================================================

CREATE TABLE public.cajas (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  descripcion text NOT NULL,
  turno text
);

-- =====================================================
-- 11. EMPLEADOS (SIN DEPENDENCIAS)
-- =====================================================

CREATE TABLE public.empleados (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre text NOT NULL,
  apellido text,
  telefono text,
  email text,
  activo boolean DEFAULT true
);

-- =====================================================
-- 12. ENTIDADES - CLIENTES/PROVEEDORES (SIN DEPENDENCIAS)
-- =====================================================

CREATE TABLE public.entidades (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  razon_social text NOT NULL,
  tipo text NOT NULL CHECK (tipo IN ('cliente', 'proveedor')),
  email text,
  tipo_doc text CHECK (tipo_doc IN ('dni', 'cuit', 'cuil')),
  num_doc text,
  telefono text,
  categoria_iva text CHECK (categoria_iva IN ('Consumidor Final', 'Responsable Inscripto', 'Responsable Monotributo', 'Exento', 'No Responsable', 'Sujeto no Categorizado')),
  maximo_cuenta_corriente numeric(10,2)
);

-- =====================================================
-- 13. ARTÍCULOS (DEPENDE DE AGRUPADORES Y MARCAS)
-- =====================================================

CREATE TABLE public.articulos (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  descripcion text NOT NULL,
  precio_unitario numeric(10,2) NOT NULL,
  precio_costo numeric(10,2),
  mark_up numeric(5,2),
  fk_id_agrupador bigint REFERENCES agrupadores(id),
  fk_id_marca bigint REFERENCES marcas(id),
  activo boolean DEFAULT true,
  stock numeric(10,2) DEFAULT 0
);

-- =====================================================
-- 14. VARIANTES DE ARTÍCULOS (DEPENDE DE ARTÍCULOS, TALLES Y COLORES)
-- =====================================================

CREATE TABLE public.variantes_articulos (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  creado_el timestamp with time zone DEFAULT now(),
  fk_id_articulo bigint NOT NULL REFERENCES articulos(id),
  stock_unitario integer DEFAULT 0,
  stock_minimo integer DEFAULT 0,
  stock_maximo integer DEFAULT 0,
  fk_id_talle bigint REFERENCES talles(id),
  fk_id_color bigint REFERENCES color(id),
  precio_venta numeric(10,2),
  codigo_barras text
);

-- =====================================================
-- 15. LOTES DE OPERACIONES (DEPENDE DE USUARIOS Y CAJAS)
-- =====================================================

CREATE TABLE public.lotes_operaciones (
  id_lote bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  fk_id_usuario bigint NOT NULL REFERENCES usuarios(id),
  fk_id_caja bigint NOT NULL REFERENCES cajas(id),
  abierto boolean DEFAULT true,
  tipo_lote text CHECK (tipo_lote IN ('apertura', 'cierre')),
  fecha_apertura timestamp with time zone DEFAULT now(),
  hora_apertura text,
  fecha_cierre timestamp with time zone,
  hora_cierre text,
  observaciones text,
  saldo_inicial numeric(10,2) DEFAULT 0
);

-- =====================================================
-- 16. ÓRDENES DE VENTA (DEPENDE DE ENTIDADES, USUARIOS, LOTES Y TIPOS_COMPROBANTES)
-- =====================================================

CREATE TABLE public.ordenes_venta (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  fk_id_entidades bigint REFERENCES entidades(id),
  fk_id_usuario bigint NOT NULL REFERENCES usuarios(id),
  fk_id_lote bigint NOT NULL REFERENCES lotes_operaciones(id_lote),
  fk_id_tipo_comprobante bigint REFERENCES tipos_comprobantes(id),
  fecha timestamp with time zone DEFAULT now(),
  total numeric(10,2) NOT NULL,
  subtotal numeric(10,2) NOT NULL
);

-- =====================================================
-- 17. DETALLES DE ÓRDENES DE VENTA (DEPENDE DE ÓRDENES_VENTA, ARTÍCULOS, TALLES Y COLORES)
-- =====================================================

CREATE TABLE public.ordenes_venta_detalle (
  idd bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  fk_id_orden bigint NOT NULL REFERENCES ordenes_venta(id),
  fk_id_articulo bigint NOT NULL REFERENCES articulos(id),
  cantidad integer NOT NULL,
  precio_unitario numeric(10,2) NOT NULL,
  fk_id_talle bigint REFERENCES talles(id),
  fk_id_color bigint REFERENCES color(id)
);

-- =====================================================
-- 18. MEDIOS DE PAGO DE ÓRDENES DE VENTA (DEPENDE DE ÓRDENES_VENTA Y CUENTAS_TESORERIA)
-- =====================================================

CREATE TABLE public.ordenes_venta_medios_pago (
  idd bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  fk_id_orden bigint NOT NULL REFERENCES ordenes_venta(id),
  fk_id_cuenta_tesoreria bigint NOT NULL REFERENCES cuentas_tesoreria(id),
  monto_pagado numeric(10,2) NOT NULL CHECK (monto_pagado > 0)
);

-- =====================================================
-- 19. IMPUESTOS DE ÓRDENES DE VENTA (DEPENDE DE ÓRDENES_VENTA)
-- =====================================================

CREATE TABLE public.ordenes_venta_impuestos (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  fk_id_orden bigint NOT NULL REFERENCES ordenes_venta(id),
  tipo_impuesto text NOT NULL,
  porcentaje numeric(5,2) NOT NULL,
  monto numeric(10,2) NOT NULL
);

-- =====================================================
-- 20. MOVIMIENTOS DE STOCK (DEPENDE DE ARTÍCULOS, ÓRDENES_VENTA, TALLES Y COLORES)
-- =====================================================

CREATE TABLE public.movimientos_stock (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  fk_id_articulos bigint NOT NULL REFERENCES articulos(id),
  fk_id_orden bigint REFERENCES ordenes_venta(id),
  origen text NOT NULL,
  tipo text NOT NULL,
  cantidad numeric(10,2) NOT NULL,
  stock_actual numeric(10,2) NOT NULL,
  creado_el timestamp with time zone DEFAULT now(),
  fk_id_talle bigint REFERENCES talles(id),
  fk_id_color bigint REFERENCES color(id)
);

-- =====================================================
-- 21. DETALLES DE LOTES DE OPERACIONES (DEPENDE DE LOTES_OPERACIONES Y CUENTAS_TESORERIA)
-- =====================================================

CREATE TABLE public.detalle_lotes_operaciones (
  idd bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  fk_id_lote bigint NOT NULL REFERENCES lotes_operaciones(id_lote),
  fk_id_cuenta_tesoreria bigint NOT NULL REFERENCES cuentas_tesoreria(id),
  tipo text CHECK (tipo IN ('ingreso', 'egreso')),
  monto numeric(10,2) NOT NULL,
  fecha_movimiento timestamp with time zone DEFAULT now()
);

-- =====================================================
-- 22. CUENTAS CORRIENTES (DEPENDE DE ÓRDENES_VENTA Y ENTIDADES)
-- =====================================================

CREATE TABLE public.cuentas_corrientes (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  creada_el timestamp with time zone DEFAULT now(),
  fk_id_orden bigint NOT NULL REFERENCES ordenes_venta(id),
  fk_id_cliente bigint NOT NULL REFERENCES entidades(id),
  total numeric(10,2) NOT NULL,
  saldo numeric(10,2) NOT NULL,
  estado text CHECK (estado IN ('pendiente', 'pagada', 'cancelado'))
);

-- =====================================================
-- 23. PAGOS DE CUENTA CORRIENTE (DEPENDE DE CUENTAS_CORRIENTES, USUARIOS Y LOTES_OPERACIONES)
-- =====================================================

CREATE TABLE public.pagos_cuenta_corriente (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  fk_id_cuenta_corriente bigint NOT NULL REFERENCES cuentas_corrientes(id),
  monto numeric(10,2) NOT NULL,
  fecha_pago timestamp with time zone DEFAULT now(),
  fk_id_usuario bigint NOT NULL REFERENCES usuarios(id),
  fk_id_lote bigint NOT NULL REFERENCES lotes_operaciones(id_lote)
);

-- =====================================================
-- 24. GASTOS DE EMPLEADOS (DEPENDE DE TIPO_GASTO, EMPLEADOS, LOTES_OPERACIONES, USUARIOS Y CUENTAS_TESORERIA)
-- =====================================================

CREATE TABLE public.gastos_empleados (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  creado_el timestamp with time zone DEFAULT now(),
  fk_tipo_gasto bigint NOT NULL REFERENCES tipo_gasto(id),
  monto numeric(10,2) NOT NULL,
  descripcion text,
  fk_empleado bigint NOT NULL REFERENCES empleados(id),
  fk_lote_operaciones bigint NOT NULL REFERENCES lotes_operaciones(id_lote),
  fk_usuario bigint NOT NULL REFERENCES usuarios(id),
  fk_cuenta_tesoreria bigint NOT NULL REFERENCES cuentas_tesoreria(id)
);

-- =====================================================
-- 25. LIQUIDACIONES (DEPENDE DE EMPLEADOS)
-- =====================================================

CREATE TABLE public.liquidaciones (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  fk_id_empleado bigint NOT NULL REFERENCES empleados(id),
  fecha_inicio date NOT NULL,
  fecha_fin date NOT NULL,
  total_ventas numeric(10,2) DEFAULT 0,
  comision numeric(10,2) DEFAULT 0,
  total_liquidacion numeric(10,2) DEFAULT 0,
  estado text DEFAULT 'pendiente'
);

-- =====================================================
-- 26. ÓRDENES DE COMPRA (DEPENDE DE ENTIDADES Y CONFIGURACIÓN)
-- =====================================================

CREATE TABLE public.ordenes_compra (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  creado_el timestamp with time zone DEFAULT now(),
  numero_orden text NOT NULL,
  fecha date NOT NULL,
  fk_id_proveedor bigint NOT NULL REFERENCES entidades(id),
  fk_id_empresa bigint NOT NULL REFERENCES configuracion(id),
  subtotal numeric(10,2) NOT NULL,
  descuento_porcentaje numeric(5,2) DEFAULT 0,
  subtotal_menos_descuento numeric(10,2) NOT NULL,
  tasa_impuestos numeric(5,2) DEFAULT 0,
  total_impuestos numeric(10,2) DEFAULT 0,
  envio_almacenaje numeric(10,2) DEFAULT 0,
  total numeric(10,2) NOT NULL,
  estado text CHECK (estado IN ('borrador', 'generando', 'completada', 'cancelada')),
  notas text
);

-- =====================================================
-- 27. DETALLES DE ÓRDENES DE COMPRA (DEPENDE DE ÓRDENES_COMPRA Y ARTÍCULOS)
-- =====================================================

CREATE TABLE public.ordenes_compra_detalle (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  fk_id_orden_compra bigint NOT NULL REFERENCES ordenes_compra(id),
  fk_id_articulo bigint NOT NULL REFERENCES articulos(id),
  cantidad integer NOT NULL,
  precio_unitario numeric(10,2) NOT NULL,
  subtotal numeric(10,2) NOT NULL
);

-- =====================================================
-- 28. MÓDULOS DEL SISTEMA (SIN DEPENDENCIAS)
-- =====================================================

CREATE TABLE public.modulos (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre text NOT NULL UNIQUE,
  descripcion text,
  icono text,
  ruta text,
  activo boolean DEFAULT true,
  orden integer DEFAULT 0,
  creado_el timestamp with time zone DEFAULT now()
);

-- =====================================================
-- 29. PERMISOS DE USUARIOS (DEPENDE DE USUARIOS Y MÓDULOS)
-- =====================================================

CREATE TABLE public.permisos_usuarios (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  fk_id_usuario bigint NOT NULL REFERENCES usuarios(id) ON DELETE CASCADE,
  fk_id_modulo bigint NOT NULL REFERENCES modulos(id) ON DELETE CASCADE,
  puede_ver boolean DEFAULT false,
  creado_el timestamp with time zone DEFAULT now(),
  actualizado_el timestamp with time zone DEFAULT now(),
  CONSTRAINT permisos_usuarios_unique UNIQUE (fk_id_usuario, fk_id_modulo)
);

-- =====================================================
-- ÍNDICES PARA MEJORAR EL RENDIMIENTO
-- =====================================================

-- Usuarios
CREATE INDEX idx_usuarios_clerk_user_id ON usuarios(clerk_user_id);
CREATE INDEX idx_usuarios_email ON usuarios(email);

-- Entidades
CREATE INDEX idx_entidades_tipo ON entidades(tipo);
CREATE INDEX idx_entidades_razon_social ON entidades(razon_social);

-- Artículos
CREATE INDEX idx_articulos_activo ON articulos(activo);
CREATE INDEX idx_articulos_fk_id_agrupador ON articulos(fk_id_agrupador);
CREATE INDEX idx_articulos_fk_id_marca ON articulos(fk_id_marca);

-- Variantes
CREATE INDEX idx_variantes_articulos_fk_id_articulo ON variantes_articulos(fk_id_articulo);
CREATE INDEX idx_variantes_articulos_codigo_barras ON variantes_articulos(codigo_barras);

-- Órdenes de Venta
CREATE INDEX idx_ordenes_venta_fecha ON ordenes_venta(fecha);
CREATE INDEX idx_ordenes_venta_fk_id_entidades ON ordenes_venta(fk_id_entidades);
CREATE INDEX idx_ordenes_venta_fk_id_usuario ON ordenes_venta(fk_id_usuario);

-- Detalles de Venta
CREATE INDEX idx_ordenes_venta_detalle_fk_id_orden ON ordenes_venta_detalle(fk_id_orden);
CREATE INDEX idx_ordenes_venta_detalle_fk_id_articulo ON ordenes_venta_detalle(fk_id_articulo);

-- Medios de Pago
CREATE INDEX idx_ordenes_venta_medios_pago_fk_id_orden ON ordenes_venta_medios_pago(fk_id_orden);
CREATE INDEX idx_ordenes_venta_medios_pago_fk_id_cuenta_tesoreria ON ordenes_venta_medios_pago(fk_id_cuenta_tesoreria);

-- Movimientos de Stock
CREATE INDEX idx_movimientos_stock_fk_id_articulos ON movimientos_stock(fk_id_articulos);
CREATE INDEX idx_movimientos_stock_creado_el ON movimientos_stock(creado_el);

-- Lotes de Operaciones
CREATE INDEX idx_lotes_operaciones_fk_id_usuario ON lotes_operaciones(fk_id_usuario);
CREATE INDEX idx_lotes_operaciones_abierto ON lotes_operaciones(abierto);

-- Módulos y Permisos
CREATE INDEX idx_permisos_usuarios_usuario ON permisos_usuarios(fk_id_usuario);
CREATE INDEX idx_permisos_usuarios_modulo ON permisos_usuarios(fk_id_modulo);
CREATE INDEX idx_modulos_activo ON modulos(activo);
CREATE INDEX idx_modulos_orden ON modulos(orden);

-- =====================================================
-- DATOS INICIALES BÁSICOS
-- =====================================================

-- Configuración de empresa
INSERT INTO configuracion (nombre, color_primario) 
VALUES ('Mi Empresa', '#22c55e');

-- Cuentas de tesorería básicas
INSERT INTO cuentas_tesoreria (descripcion) 
VALUES 
  ('EFECTIVO'), 
  ('TRANSFERENCIA'), 
  ('TARJETA'),
  ('CUENTA CORRIENTE');

-- Caja principal
INSERT INTO cajas (descripcion, turno) 
VALUES ('Caja Principal', 'Mañana');

-- Tipos de comprobantes básicos
INSERT INTO tipos_comprobantes (descripcion, reingresa_stock) 
VALUES 
  ('FACTURA A', false), 
  ('FACTURA B', false), 
  ('TICKET', false), 
  ('NOTA DE CRÉDITO', true);

-- Agrupador general
INSERT INTO agrupadores (nombre) 
VALUES ('General');

-- Marca por defecto
INSERT INTO marcas (descripcion) 
VALUES ('Sin Marca');

-- Talle único
INSERT INTO talles (descripcion) 
VALUES ('ÚNICO');

-- Color por defecto
INSERT INTO color (descripcion) 
VALUES ('Sin Color');

-- Tipos de gasto básicos (según el código encontrado)
INSERT INTO tipo_gasto (descripcion, obliga_empleado, afecta_caja) 
VALUES 
  ('adelanto', true, true),
  ('falta', true, true),
  ('sueldo', true, true),
  ('gasto general', false, true),
  ('otros', false, false);

-- Cliente CONSUMIDOR FINAL (ID 1 como se usa en el código)
INSERT INTO entidades (id, razon_social, tipo, categoria_iva) 
VALUES (1, 'CONSUMIDOR FINAL', 'cliente', 'Consumidor Final');

-- =====================================================
-- SISTEMA DE PERMISOS
-- =====================================================

-- Insertar módulos del sistema
INSERT INTO public.modulos (nombre, descripcion, icono, ruta, orden) VALUES
('dashboard', 'Dashboard', 'BarChart3', '/dashboard', 1),
('articulos', 'Gestión de Artículos', 'Package', '/articles', 2),
('clientes', 'Gestión de Clientes', 'Users', '/clientes', 3),
('ventas', 'Ventas', 'ShoppingCart', '/ventas', 4),
('mis-ventas', 'Mis Ventas', 'FileText', '/mis-ventas', 5),
('pagos', 'Pagos', 'CreditCard', '/pagos', 6),
('cuentas-corrientes', 'Cuentas Corrientes', 'Receipt', '/cuentas-corrientes', 7),
('movimientos-stock', 'Movimientos de Stock', 'Truck', '/movimientos-stock', 8),
('importacion-stock', 'Importación de Stock', 'Upload', '/importacion-stock', 9),
('stock-faltante', 'Stock Faltante', 'AlertTriangle', '/stock-faltante', 10),
('caja', 'Caja', 'CashRegister', '/caja', 11),
('empleados', 'Empleados', 'UserCheck', '/empleados', 12),
('gastos-empleados', 'Gastos de Empleados', 'DollarSign', '/gastos-empleados', 13),
('liquidaciones', 'Liquidaciones', 'Calculator', '/liquidaciones', 14),
('talles-colores', 'Talles y Colores', 'Palette', '/talles-colores', 15),
('variantes-productos', 'Variantes de Productos', 'Layers', '/variantes-productos', 16),
('agrupadores', 'Agrupadores', 'Folder', '/agrupadores', 17),
('usuarios', 'Usuarios', 'Users', '/usuarios', 18);

-- =====================================================
-- FUNCIONES Y TRIGGERS PARA PERMISOS
-- =====================================================

-- Función para crear permisos por defecto para un nuevo usuario
CREATE OR REPLACE FUNCTION crear_permisos_por_defecto()
RETURNS TRIGGER AS $$
BEGIN
  -- Insertar todos los módulos con permisos básicos según el rol
  INSERT INTO permisos_usuarios (fk_id_usuario, fk_id_modulo, puede_ver)
  SELECT 
    NEW.id,
    m.id,
    CASE 
      WHEN NEW.rol = 'admin' THEN true
      WHEN NEW.rol = 'supervisor' THEN true
      WHEN NEW.rol = 'vendedor' THEN m.nombre IN ('dashboard', 'articulos', 'clientes', 'ventas', 'mis-ventas', 'movimientos-stock', 'importacion-stock', 'stock-faltante', 'talles-colores', 'variantes-productos', 'agrupadores')
      WHEN NEW.rol = 'cobrador' THEN m.nombre IN ('dashboard', 'ventas', 'mis-ventas', 'pagos', 'cuentas-corrientes', 'caja')
      ELSE false
    END
  FROM modulos m
  WHERE m.activo = true;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger para crear permisos automáticamente al crear un usuario
CREATE TRIGGER trigger_crear_permisos_usuario
  AFTER INSERT ON usuarios
  FOR EACH ROW
  EXECUTE FUNCTION crear_permisos_por_defecto();

-- Función para actualizar permisos cuando se cambia el rol de un usuario
CREATE OR REPLACE FUNCTION actualizar_permisos_por_rol()
RETURNS TRIGGER AS $$
BEGIN
  -- Eliminar permisos existentes
  DELETE FROM permisos_usuarios WHERE fk_id_usuario = NEW.id;
  
  -- Insertar nuevos permisos según el rol
  INSERT INTO permisos_usuarios (fk_id_usuario, fk_id_modulo, puede_ver)
  SELECT 
    NEW.id,
    m.id,
    CASE 
      WHEN NEW.rol = 'admin' THEN true
      WHEN NEW.rol = 'supervisor' THEN true
      WHEN NEW.rol = 'vendedor' THEN m.nombre IN ('dashboard', 'articulos', 'clientes', 'ventas', 'mis-ventas', 'movimientos-stock', 'importacion-stock', 'stock-faltante', 'talles-colores', 'variantes-productos', 'agrupadores')
      WHEN NEW.rol = 'cobrador' THEN m.nombre IN ('dashboard', 'ventas', 'mis-ventas', 'pagos', 'cuentas-corrientes', 'caja')
      ELSE false
    END
  FROM modulos m
  WHERE m.activo = true;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger para actualizar permisos cuando se cambia el rol
CREATE TRIGGER trigger_actualizar_permisos_rol
  AFTER UPDATE OF rol ON usuarios
  FOR EACH ROW
  EXECUTE FUNCTION actualizar_permisos_por_rol();

-- =====================================================
-- PERMISOS PARA USUARIO ADMINISTRADOR
-- =====================================================

-- Crear usuario administrador (reemplaza con los datos reales)
-- INSERT INTO usuarios (nombre, email, rol, clerk_user_id) 
-- VALUES ('Administrador', 'admin@empresa.com', 'admin', 'user_admin_clerk_id');

-- Crear permisos completos para el administrador (ejecutar después de crear el usuario admin)
-- INSERT INTO permisos_usuarios (fk_id_usuario, fk_id_modulo, puede_ver, puede_crear, puede_editar, puede_eliminar)
-- SELECT 
--   1, -- ID del usuario administrador
--   m.id,
--   true,  -- puede_ver
--   true,  -- puede_crear
--   true,  -- puede_editar
--   true   -- puede_eliminar
-- FROM modulos m
-- WHERE m.activo = true;

-- =====================================================
-- VERIFICACIÓN FINAL
-- =====================================================

-- Listar todas las tablas creadas
SELECT table_name 
FROM information_schema.tables 
WHERE table_schema = 'public' 
ORDER BY table_name;

-- =====================================================
-- ¡LISTO! SISTEMA POS COMPLETAMENTE CONFIGURADO
-- =====================================================

